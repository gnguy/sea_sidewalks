r = raster(path)
r
plot(r)
readClipboard()
netcdf = "E:\\DropboxCopy_KristinRichard\\Erica\\Raster\\AMSR2\\NetCDF\\2015\\09\\Arc_20150910_res3.125_pyres.nc"
r = raster(netcdf)
plot(r)
plot(r, title="Title")
plot(r, main="Title")
warnings()
r
#projection(r) = CRS("+proj=stere +lat_0=90 +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
proj4 <- "+proj=stere +lat_0=90 +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
projection(r) = CRS(proj4)
plot(r, main="np_stereo")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
play()
c(1:5,10.5,"next")
x <- 1:4
names(x) <- c('a', 'b', 'c', 'd')
c(x)
x
as.vector(x)
typeof(x)
dim(x) <- c(2,2)
x
c(x)
x
as.vector(x)
c(list(A = c(B = 1)), recursive = TRUE)
c(options(), recursive = TRUE)
c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
nxt()
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
exit()
info()
bye()
library(raster)
library(rgdal)
library(maptools)
readClipboard(
)
library("ncdf4")
help(ncopen)
help(nc_open)
readClipboard()
nc <- nc_open("C:\\Users\\Richard\\Desktop\\GIS\\gdal_test_data\\input\\Arc_20141210_res3.125_pyres.nc", write=TRUE)
help(ncvar_def)
x <- org.Hs.egGENENAME
# Get the gene names that are mapped to an entrez gene identifier
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Get the GENE NAME for the first five genes
xx[1:5]
# Get the first one
xx[[1]]
}
library(org.Hs.eg.db)
library(org.Hs.eg.db)
x <- org.Hs.egGENENAME
# Get the gene names that are mapped to an entrez gene identifier
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Get the GENE NAME for the first five genes
xx[1:5]
# Get the first one
xx[[1]]
}
foo <- c(12, 22, 33)
names(foo) <- c('tic', 'tac', 'toe')
foo
foo['tac']
foo[['tac']]
names(foo)
unlist(foo)
unlist(foo)[1]
paste("hi mr", unlist(foo)[1])
foo <- list('tic'='1', 'tac'='2', 'toe'='3')
unlist(foo)
foo
as.numeric(foo)
foo <- list('tic'='hi', 'tac'='bye', 'toe'='me')
as.numeric(foo)
save(df, "df.rda")
save(df, file=\"df.rda")
save(df, file="df.rda")
rm(df)
typeof(df)
load("df.rda")
typeof(df)
df <- t
typeof(df)
typeof(t)
load("C:/Users/Richard/Desktop/Cure Cancer with Xiaomei/Colon Cancer/.RData")
hmat.df[1:5,1:5]
help(dist)
dist(rbind(hmat.df$T29, hmat.df$T30))
dist(rbind(c(1,1),c(2,2)))
sum(is.na(hmat.df))
rep(c(1,2))
rep(c(1,2),2)
help(shuffle)
sample(1:10)
paste(1:10,LETTERS[1:10],sep='')
paste(1:10, 'Z',sep='')
paste(1:10,LETTERS[1:9],sep='')
deck <- paste(1:10, LETTERS, sep='')
deck
deck <- paste(1:10, LETTERS[1:10], sep='')
deck
sample(deck, 3)
sample(deck, 3)
sample(deck, 3)
sample(deck, 3)
sample(deck, 3)
sample(deck, 10)
sample(deck, 11)
help(setdiff)
setdiff(c(1,2,3), c(1,1,3))
x <- c('a', 1, 'c')
y <- c(2, 'b', 'c')
1 %in% c(1,2) | F
1 %in% (c(1,2) | F)
0 %in% T
T
x %in% y | y %in% x
(x %in% y) | (y %in% x)
x
y
x[x %in% y]
y[y %in% x]
myunion <- function(a, b) {
return unique(c(a[a%in%b],b[b%in%a]))
}
myunion <- function(a, b) {
return(unique(c(a[a%in%b],b[b%in%a])))
}
myunion(x,y)
deck
deck <- 1:10
hand <- sample(deck, 3)
setdiff(hand, deck)
setdiff(deck, hand)
hand
apply(c(1,2,3), function(x) x+1)
apply(c(1,2,3), FUN=function(x) x+1)
apply(c(1,2,3), FUN=function(x) return(x+1))
help(apply)
apply(c(1,2,3), 1, function(x) x+1)
apply(c(1,2,3), 1, function(x) {x+1})
sapply(1:3, function(x) {x+1})
sapply(1:3, function(x) {rm(x[1])})
rm(1:3)[1]
rm((1:3)[1])
x <- 1:3
rm(x[1])
rm(list=c(x[1]))
rm(list(x[1]))
x <- 1:5
m <- x[x<3]
m
m <- c(0, 0)
x
m
source('C:/Users/Richard/Desktop/Programming/R/cards.R')
iter()
source('C:/Users/Richard/Desktop/Programming/R/cards.R')
source('C:/Users/Richard/Desktop/Programming/R/cards.R')
source('C:/Users/Richard/Desktop/Programming/R/cards.R')
source('C:/Users/Richard/Desktop/Programming/R/cards.R')
install.packages("neuralnet")
library(neuralnet)
library(MASS)
str(Boston)
head(Boston)
nrow(Boston)
length(names(Boston))
data <- Boston
apply(data, 2, function(x) sum(is.na(x)))
load("C:/Users/Richard/Desktop/Cure Cancer with Xiaomei/Stomach Cancer/.RData")
load("C:/Users/Richard/Desktop/Cure Cancer with Xiaomei/Stomach Cancer/.RData")
dim(data)
data <- hmat.nolog.df
dim(data)
t.data <- t(data)
dim(t.data)
data <- t(hmat.nolog.df) # 2338 x 132
dim(data)
seq(c1)
c1
help(seq)
seq_along(c1)
abline(v=c(c1,c2,c3,c4), col=c(rep("red",2), rep("blue",2), rep("yellow",2), rep("green",2)))
plot(dists, main="Title", cex=0.6)
abline(v=c(c1,c2,c3,c4), col=c(rep("red",2), rep("blue",2), rep("yellow",2), rep("green",2)))
data$Cluster <- rep(NA, 132)
data[28:33,]$Cluster <- "1"
data[52:58,]$Cluster <- "2"
data[60:81,]$Cluster <- "3"
data[82:86,]$Cluster <- "4"
data <- t(hmat.nolog.df) # 132 x 2338
# Label the rows (patients) we know
data$Cluster <- rep(NA, 132)
data[28:33,]$Cluster <- "1"
data[52:58,]$Cluster <- "2"
data[60:81,]$Cluster <- "3"
data[82:86,]$Cluster <- "4"
dim(data)
is.list(data)
data <- t(hmat.nolog.df) # 132 x 2338
data[1:5,1:5]
dim(data)
data$idx <- 1:132
data <- as.data.frame(data)
is.list(data)
is.data.frame(data)
data[1:5,1:5]
data <- t(hmat.nolog.df) # 132 x 2338
cluster_labels <- rep(NA, 132)
nrow(data)
data <- t(hmat.nolog.df) # 132 x 2338
# Label the rows (patients) we know
cluster_labels <- rep(NA, 132)
cluster_labels[28:33] <- "1"
cluster_labels[52:58] <- "2"
cluster_labels[60:81] <- "3"
cluster_labels[82:86] <- "4"
cluster_labels
mydf <- data.frame(People=c("Alice", "Bob", "Carlos"), Age=c(12, 15, 25), Weight=c(110, 140, 175))
mydf
is.data.frame(mydf)
is.data.frame(t(mydf))
t(mydf)
lm(mydf$Age ~ mydf$Weight)
plot(lm(mydf$Age ~ mydf$Weight))
glm(age ~ ., data=mydf)
glm(Age ~ ., data=mydf)
mydf
typeof(mydf$People)
is.factor(mydf$People)
mydf$idx <- c(1.1, 2.2, 3.3)
mydf
typeof(mydf)
t(mydf)
hmat.nolog.df[1:5,1:5]
hmat.nolog.df[1:5,128:132]
typeof(hmat.nolog.df)
typeof(mydf)
mydf
is.data.frame(mydf)
is.data.frame(t(mydf))
hmat.nolog.df <- as.data.frame(hmat.nolog.df)
data <- as.data.frame(t(hmat.nolog.df) # 132 x 2338
data <- as.data.frame(t(hmat.nolog.df)) # 132 x 2338
data[1:5,1:5]
hmat.nolog.df[1:5,1:5]
cluster_labels <- rep(NA, 132)
cluster_labels[28:33] <- "1"
cluster_labels[52:58] <- "2"
cluster_labels[60:81] <- "3"
cluster_labels[82:86] <- "4"
data$Cluster <- cluster_labels
data[1:5,128:132]
data[1:5,128:133]
dim(data)
data[1:5,2336:2339]
cluster_labels <- rep(NA, 132)
cluster_labels[28:33] <- 1
cluster_labels[52:58] <- 2
cluster_labels[60:81] <- 3
cluster_labels[82:86] <- 4
# Append to data
data$Cluster <- cluster_labels
data[1:5,2336:2339]
sum(data$Cluster)
sum(data$Cluster, na.rm=T)
is.numeric(NA)
sum(!is.na(data))
sum(!is.na(data$Cluster))
training <- data[!is.na(data$Cluster),]
n <- names(training)
f <- as.formula(paste("Cluster ~", paste(n[!n %in% "Cluster"], collapse = " + ")))
f
names(Boston)
library(MASS)
names(Boston)
mydf
mydf[,-"idx"]
training <- data[!is.na(data$Cluster),]
idx <- sample(1:nrow(training), round(0.75*nrow(training)))
train <- training[idx,]
test <- select(training[-idx,], -Cluster)
test <- select(training[-idx,], -c(Cluster))
test <- dply::select(training[-idx,], -Cluster)
library(dplyr)
test <- select(training[-idx,], -Cluster)
dim(Boston)
dim(data)
install.packages("stringr")
library(stringr)
letters %>%
str_pad(5, "right") %>%
str_c(letters)
str_c("hi","...and...bye")
str_pad('hi', 5, 'right')
str_pad('Richard', 5, 'right')
str_pad('Richard', 8, 'right')
help(str_pad)
str_conv('hi')
help(str_conv)
install.packages("randomForest")
library(randomForest)
trn
library(dplyr)
setwd("C:\\Users\\Richard\\Desktop\\Wombat Walkers City Hackathon\\CSV")
# Data
obs <- read.csv("SidewalkObservations.csv", stringsAsFactors=F)
ver <- read.csv("SidewalkVerifications.csv", stringsAsFactors=F)
names(obs)[1] <- "X"
names(ver)[1] <- "OBJECTID"
plot(table(obs$OBSERV_TYPE))
unique(obs$OBSERV_TYPE)
install.packages("leaflet")
library(leaflet)
library(magrittr)
SFmap <- leaflet() %>%
addTiles() %>%
setView(-122.42, 37.78, zoom = 13) %>%
addMarkers(-122.42, 37.78, popup = 'Bay Area')
SFmap
library(leaflet)
library(magrittr)
SFmap <- leaflet() %>%
addTiles() %>%
setView(-122.42, 37.78, zoom = 13) %>%
addMarkers(-122.42, 37.78, popup = 'Seattle')
SFmap
help(leaflet)
# geoJSON
seattle_geojson = list(
type = "Feature",
geometry = list(
type = "MultiPolygon",
coordinates = list(list(list(
c(-122.36075812146,  47.6759920119894),
c(-122.360781646764, 47.6668890126755),
c(-122.360782108665,  47.6614990696722),
c(-122.366199035722, 47.6614990696722),
c(-122.366199035722,  47.6592874248973),
c(-122.364582509469, 47.6576254522105),
c(-122.363887331445,  47.6569107302038),
c(-122.360865528129, 47.6538418253251),
c(-122.360866157644,  47.6535254473167),
c(-122.360866581103, 47.6533126275176),
c(-122.362526540691,  47.6541872926348),
c(-122.364442114483, 47.6551892850798),
c(-122.366077719797,  47.6560733960606),
c(-122.368818463838, 47.6579742346694),
c(-122.370115159943,  47.6588730808334),
c(-122.372295967029, 47.6604350102328),
c(-122.37381369088,  47.660582362063),
c(-122.375522972109, 47.6606413027949),
c(-122.376079703095,  47.6608793094619),
c(-122.376206315662, 47.6609242364243),
c(-122.377610811371,  47.6606160735197),
c(-122.379857378879, 47.6610306942278),
c(-122.382454873022,  47.6627496239169),
c(-122.385357955057, 47.6638573778241),
c(-122.386007328104,  47.6640865692306),
c(-122.387186331506, 47.6654326177161),
c(-122.387802656231,  47.6661492860294),
c(-122.388108244121, 47.6664548739202),
c(-122.389177800763,  47.6663784774359),
c(-122.390582858689, 47.6665072251861),
c(-122.390793942299,  47.6659699214511),
c(-122.391507906234, 47.6659200946229),
c(-122.392883050767,  47.6664166747017),
c(-122.392847210144, 47.6678696739431),
c(-122.392904778401,  47.6709016021624),
c(-122.39296705153, 47.6732047491624),
c(-122.393000803496,  47.6759322346303),
c(-122.37666945305, 47.6759896300663),
c(-122.376486363943,  47.6759891899754),
c(-122.366078869215, 47.6759641734893),
c(-122.36075812146,  47.6759920119894)
)))
),
properties = list(
name = "Ballard",
population = 48000,
# You can inline styles if you want
style = list(
fillColor = "yellow",
weight = 2,
color = "#000000"
)
),
id = "ballard"
)
install.packages("sf")
install.packages("sp")
library(sp)
library(sf)
readClipboard()
help(data)
readClipboard()
POI <- read.csv("PointsOfInterest.csv")
setwd("C:\\Users\\Richard\\Documents\\GitHub\\sea_sidewalks\\neighborhood_map\\data\\POI")
POI <- read.csv("PointsOfInterest.csv")
names(POI)
POI <- POI[,c(3,4)]
head(POI)
typeof(POI$Latitude)
typeof(POI$Longitude)
coordinates(POI) <- ~Longitude+Latitude
str(POI)
help(readOGR)
install.packages("rgdal")
install.packages("rgeos")
install.packages("spdep")
help(readOGR)
library(sf)
library(sp)
library(rgdal)
library(rgeos)
library(spdep)
help(readOGR)
help(crs)
POI <- spTransform(POI, CRS(wa_proj))
wa_proj <- "+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs"
POI <- spTransform(POI, CRS(wa_proj))
typeof(POI)
CRS(POI)
proj4string(POI)
head(POI)
proj4string(POI) <- CRS(latlong)
proj4string(POI) <- CRS("+init=epsg:4326")
proj4string(POI) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
library(sf)
library(sp)
library(rgdal)
library(rgeos)
library(spdep)
setwd("C:\\Users\\Richard\\Documents\\GitHub\\sea_sidewalks\\neighborhood_map\\data\\POI")
POI <- read.csv("PointsOfInterest.csv")
POI <- POI[,c(3,4)]
# sp
coordinates(POI) <- ~Longitude+Latitude
# Tell R it's in Lat/Lon
proj4string(POI) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(POI) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
names(POI)
head(POI)
5 <- read.csv("PointsOfInterest.csv")
t <- read.csv("PointsOfInterest.csv")
head(t)
typeof(t$Latitude)
sum(is.na(t$Latitude))
sum(is.na(t$Longitude))
range(t$Latitude)
POI <- read.csv("PointsOfInterest.csv")
head(POI)
table(POI$Type)
help(as)
showMethods("coerce")
